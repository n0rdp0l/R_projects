# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
}
min <- function(n){
x = rgamma(n=n,shape = 20,rate = 1)
return(min(x))
}
m = 10**(1:5)
E_t = rep(NA,length(m))
for (i in 1:length(m)){
gmx = replicate(m[i], min(10))
E_t[i] = mean(gmx)
}
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
# m <- 10**(1:5)
theta.m <- rep(NA, length(m))
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
m <- 10**(1:5)
theta.m <- rep(NA, length(m))
rmse.theta.m <- rep(NA, length(m))
for (i in 1:length(m)){
g.x.m <- replicate(m[i], sample.minimum(n = 10))
theta.m[i] <- mean(g.x.m)
rmse.theta.m[i] <- sqrt(var(g.x.m)/m[i]) #this line is to answer point 3.
}
min <- function(n){
x = rgamma(n=n,shape = 20,rate = 1)
return(min(x))
}
m = 10**(1:5)
E_t = rep(NA,length(m))
for (i in 1:length(m)){
gmx = replicate(m[i], min(10))
E_t[i] = mean(gmx)
}
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
m <- 10**(1:5)
theta.m <- rep(NA, length(m))
rmse.theta.m <- rep(NA, length(m))
for (i in 1:length(m)){
g.x.m <- replicate(m[i], sample.minimum(n = 10))
theta.m[i] <- mean(g.x.m)
rmse.theta.m[i] <- sqrt(var(g.x.m)/m[i]) #this line is to answer point 3.
}
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
m <- 10**(1:5)
theta.m <- rep(NA, length(m))
rmse.theta.m <- rep(NA, length(m))
for (i in 1:length(m)){
g.x.m <- replicate(m[i], sample.minimum(n = 10))
theta.m[i] <- mean(g.x.m)
rmse.theta.m[i] <- sqrt(var(g.x.m)/m[i]) #this line is to answer point 3.
}
min <- function(n){
x = rgamma(n=n,shape = 20,rate = 1)
return(min(x))
}
m = 10**(1:5)
E_t = rep(NA,length(m))
for (i in 1:length(m)){
gmx = replicate(m[i], min(10))
E_t[i] = mean(gmx)
}
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
m <- 10**(1:5)
theta.m <- rep(NA, length(m))
rmse.theta.m <- rep(NA, length(m))
for (i in 1:length(m)){
g.x.m <- replicate(m[i], sample.minimum(n = 10))
theta.m[i] <- mean(g.x.m)
rmse.theta.m[i] <- sqrt(var(g.x.m)/m[i]) #this line is to answer point 3.
}
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
m <- 10**(1:5)
theta.m <- rep(NA, length(m))
rmse.theta.m <- rep(NA, length(m))
for (i in 1:length(m)){
g.x.m <- replicate(m[i], sample.minimum(n = 10))
theta.m[i] <- mean(g.x.m)
rmse.theta.m[i] <- sqrt(var(g.x.m)/m[i]) #this line is to answer point 3.
}
min <- function(n){
x = rgamma(n=n,shape = 20,rate = 1)
return(min(x))
}
m = 10**(1:5)
E_t = rep(NA,length(m))
for (i in 1:length(m)){
gmx = replicate(m[i], min(10))
E_t[i] = mean(gmx)
}
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
m <- 10**(1:5)
theta.m <- rep(NA, length(m))
rmse.theta.m <- rep(NA, length(m))
for (i in 1:length(m)){
g.x.m <- replicate(m[i], sample.minimum(n = 10))
theta.m[i] <- mean(g.x.m)
rmse.theta.m[i] <- sqrt(var(g.x.m)/m[i]) #this line is to answer point 3.
}
min <- function(n){
x = rgamma(n=n,shape = 20,rate = 1)
return(min(x))
}
m <- 10**(1:5)
E_t = rep(NA,length(m))
for (i in 1:length(m)){
gmx = replicate(m[i], min(10))
E_t[i] = mean(gmx)
}
min <- function(n){
x = rgamma(n=n,shape = 20,rate = 1)
return(min(x))
}
m <- 10**(1:5)
E_t = rep(NA,length(m))
for (i in 1:length(m)){
gmx = replicate(m[i], min(10))
E_t[i] = mean(gmx)
}
min <- function(n){
x <- rgamma(n = n,shape = 20,rate = 1)
return(min(x))
}
m <- 10**(1:5)
E_t <- rep(NA,length(m))
for (i in 1:length(m)){
gmx <- replicate(m[i], min(10))
E_t[i] <- mean(gmx)
}
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
m <- 10**(1:5)
theta.m <- rep(NA, length(m))
rmse.theta.m <- rep(NA, length(m))
for (i in 1:length(m)){
g.x.m <- replicate(m[i], sample.minimum(n = 10))
theta.m[i] <- mean(g.x.m)
rmse.theta.m[i] <- sqrt(var(g.x.m)/m[i]) #this line is to answer point 3.
}
min <- function(n){
x <- rgamma(n = n,shape = 20,rate = 1)
return(min(x))
}
m <- 10**(1:5)
E_t <- rep(NA,length(m))
for (i in 1:length(m)){
gmx <- replicate(m[i], min(10))
E_t[i] <- mean(gmx)
}
min <- function(n){
x <- rgamma(n = n,shape = 20,rate = 1)
return(min(x))
}
m <- 10**(1:5)
E_t <- rep(NA,length(m))
for (i in 1:length(m)){
gmx <- replicate(m[i], min(n=10))
E_t[i] <- mean(gmx)
}
sample.minimum = function(n) {
x <- rgamma(n = n, shape = 20, rate = 1)
return(min(x))
}
m <- 10**(1:5)
theta.m <- rep(NA, length(m))
rmse.theta.m <- rep(NA, length(m))
for (i in 1:length(m)){
g.x.m <- replicate(m[i], sample.minimum(n = 10))
theta.m[i] <- mean(g.x.m)
rmse.theta.m[i] <- sqrt(var(g.x.m)/m[i]) #this line is to answer point 3.
}
library(plotly)
weekly_probability <- function(weeks, overall_prob) {
# Calculate the probability of not winning at all
prob_no_win <- 1 - overall_prob
# Calculate the weekly probability of not winning
weekly_prob_no_win <- prob_no_win^(1/weeks)
# Calculate the weekly probability of winning
weekly_prob_win <- 1 - weekly_prob_no_win
return(weekly_prob_win)
}
weeks <- 12
overall_prob <- 0.75
weekly_probability(weeks = weeks, overall_prob = overall_prob)
weeks <- 12
overall_prob <- 0.95
weekly_probability(weeks = weeks, overall_prob = overall_prob)
weeks <- 12
overall_prob <- 0.50
weekly_probability(weeks = weeks, overall_prob = overall_prob)
weekly_probability <- function(weeks, overall_prob) {
# Calculate the probability of not winning at all
prob_no_win <- 1 - overall_prob
# Calculate the weekly probability of not winning
weekly_prob_no_win <- prob_no_win^(1/weeks)
# Calculate the weekly probability of winning
weekly_prob_win <- 1 - weekly_prob_no_win
return(weekly_prob_win)
}
weeks <- 12
# Generate a sequence of overall probabilities
overall_probs <- seq(0, 1, by = 0.01)
# Calculate the corresponding weekly probabilities
weekly_probs <- sapply(overall_probs, calculate_probability, weeks = weeks)
weekly_probability <- function(weeks, overall_prob) {
# Calculate the probability of not winning at all
prob_no_win <- 1 - overall_prob
# Calculate the weekly probability of not winning
weekly_prob_no_win <- prob_no_win^(1/weeks)
# Calculate the weekly probability of winning
weekly_prob_win <- 1 - weekly_prob_no_win
return(weekly_prob_win)
}
weeks <- 12
# Generate a sequence of overall probabilities
overall_probs <- seq(0, 1, by = 0.01)
# Calculate the corresponding weekly probabilities
weekly_probs <- sapply(overall_probs, weekly_probability, weeks = weeks)
# Plot the results
plot(overall_probs, weekly_probs, type = 'l', xlab = 'Overall Probability of Winning', ylab = 'Weekly Probability of Winning', main = paste('Relationship for', weeks, 'weeks'))
# Plot the results
plot(weekly_probs, overall_probs, type = 'l', xlab = 'Overall Probability of Winning', ylab = 'Weekly Probability of Winning', main = paste('Relationship for', weeks, 'weeks'))
# Plot the results
plot(weekly_probs, overall_probs, type = 'l', ylab = 'Overall Probability of Winning', xlab = 'Weekly Probability of Winning', main = paste('Relationship for', weeks, 'weeks'))
?hline
?abline
quantiles <- quantile(weekly_probs, probs = c(0.25, 0.5, 0.75))
abline(v = quantiles, col = "red", lty = 2)
# Plot the results
plot(weekly_probs, overall_probs, type = 'l', ylab = 'Overall Probability of Winning', xlab = 'Weekly Probability of Winning', main = paste('Relationship for', weeks, 'weeks'))
weekly_probability(weeks, 0.5)
weekly_probability(weeks, 0.75)
weekly_probability(weeks, 0.95)
weekly_probability(weeks, 0.40)
weekly_probability(weeks, 0.30)
P1 <- 0.02  # The probability of winning in the first week
Ptotal <- 0.5  # The overall probability of winning
n <- 12  # The number of weeks
# Find the ratio that makes the overall probability equal to Ptotal
r <- uniroot(overall_prob_func, interval = c(0, 1), P1 = P1, Ptotal = Ptotal, n = n)$root
# Define the function for the overall probability of winning
overall_prob_func <- function(r, P1, Ptotal, n) {
return(Ptotal - (1 - (1 - P1) * (1 - r)^(n-1)))
}
# Set the parameters
P1 <- 0.02  # The probability of winning in the first week
Ptotal <- 0.5  # The overall probability of winning
n <- 12  # The number of weeks
# Find the ratio that makes the overall probability equal to Ptotal
r <- uniroot(overall_prob_func, interval = c(0, 1), P1 = P1, Ptotal = Ptotal, n = n)$root
# Calculate the weekly probabilities
weekly_probs <- sapply(1:n, function(week) P1 * r^(week-1))
# Print the weekly probabilities
print(weekly_probs)
sum(weekly_probs)
setwd("~/Documents/Github/R_projects/simulations")
